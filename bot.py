import time
import telebot
from telebot import types
import config
import markups
import taskClass
import workWithFile

bot = telebot.TeleBot(config.TOKEN)
lastQuery = -1


# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.message_handler(commands=["start"])
def greeting(message):
    bot.send_message(message.chat.id, """
    –ø—Ä–∏–≤–µ—Ç! –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–ø–∞–ª –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–±—Å—Ç–≤–æüò∫
–≤—Å–µ –ø—Ä–æ—Å—Ç–æ: —è –¥–∞—é –ø—Ä–∏–º–µ—Ä—á–∏–∫–∏, –∞ —Ç—ã –∏—Ö —Ä–µ—à–∞–µ—à—åüßë‚Äçüéì
* –Ω–∞–∂–º–∏ /menu —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –º–µ–Ω—é
    """, reply_markup=markups.start_rmk)


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['menu'])
def mainMenu(message):
    bot.send_message(message.chat.id, """
    * –Ω–∞–∂–º–∏—Ç–µ /solve —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ—à–∞—Ç—å 
* –Ω–∞–∂–º–∏—Ç–µ /sendReview —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é
* –Ω–∞–∂–º–∏—Ç–µ /addNewTask —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö
    """, reply_markup=markups.menu_rmk)

#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@bot.message_handler(commands=['addNewTask'])
def addTask(message):
    uTaskStatement = bot.send_message(message.chat.id, """
    –Ω–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞–Ω–∏—è:
    """)
    bot.register_next_step_handler(uTaskStatement, addAns)


def addAns(uTaskStatement):
    uTaskAns = bot.send_message(uTaskStatement.chat.id, """
    –û—Ç–ª–∏—á–Ω–æ! –∞ —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    """)
    bot.register_next_step_handler(uTaskAns, addTofile, uTaskStatement)


def addTofile(uTaskAns, uTaskStatement):
    workWithFile.addToFile(uTaskStatement.text, uTaskAns.text)
    mainMenu(uTaskAns)


# –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
@bot.message_handler(commands=["sendReview"])
def review(message):
    if config.keepCalm:
        bot.send_message(message.chat.id, "–∏–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ—Ç–¥—ã—Ö–∞–µ—Ç")
        return
    userReview = bot.send_message(message.chat.id, "–Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(userReview, sendToAdmin)


def sendToAdmin(message):
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    bot.send_message(config.adminId, f'–≤–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–∑—ã–≤!\n{message.from_user.username}: {message.text}')
    mainMenu(message)


# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è
@bot.message_handler(commands=["solve"])
def createTask(message, nowRating=0, prevRating=0):
    if nowRating // 5 > prevRating // 5:
        bot.send_message(message.chat.id, f'–ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞ {nowRating // 5} —É—Ä–æ–≤–Ω–µ. –ó–∞–¥–∞–Ω–∏—è —É—Å–ª–æ–∂–Ω—è—é—Ç—Å—è.')
    elif nowRating // 5 < prevRating // 5:
        bot.send_message(message.chat.id, f'—Å–æ–±–µ—Ä–∏—Å—å.. —Ç–µ–ø–µ—Ä—å —Ç—ã –Ω–∞  {nowRating // 5} —É—Ä–æ–≤–Ω–µ.')
    task = taskClass.task(nowRating // 5)
    userAns = bot.send_message(message.chat.id, task.statement, reply_markup=myData.solve_rmk)
    bot.register_next_step_handler(userAns, checkAns, task, nowRating)


# –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
def checkAns(userAns, task, nowRating):
    if userAns.text == r"/menu":
        bot.send_message(userAns.chat.id, '–í—ã —É–≤–µ—Ä–Ω–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ–±–Ω—É–ª–∏—Ç—Å—è..')
        ext = bot.send_message(userAns.chat.id,
                               '—á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ /menu –µ—â–µ —Ä–∞–∑, –∞ —á—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞–∂–º–∏—Ç–µ /back',
                               reply_markup=markups.ext_rmk)
        bot.register_next_step_handler(ext, confirmExt, userAns, task, nowRating)
        return
    nextRating = nowRating
    if userAns.text == str(task.ans):
        bot.send_message(userAns.chat.id, '–û—Ç–ª–∏—á–Ω–æ! —É —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ—à–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Äü•∫')
        nextRating += 1
    else:
        bot.send_message(userAns.chat.id, f'–ù–µ—Çüò° –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç {task.ans}')
        if nowRating > 1:
            nextRating -= 1
        if not config.keepCalm:
            bot.send_message(config.adminId,
                             f'{userAns.from_user.username} –¥—É–º–∞–ª, —á—Ç–æ {task} {userAns.text}, –∞ –Ω–µ {task.ans}')
    createTask(userAns, nextRating, nowRating)


def confirmExt(ext, userAns, task, nowRating):
    if ext.text == '/menu':
        mainMenu(ext)
    else:
        userAns = bot.send_message(ext.chat.id, task.statement, reply_markup=markups.solve_rmk)
        bot.register_next_step_handler(userAns, checkAns, task, nowRating)


# # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.infinity_polling()
