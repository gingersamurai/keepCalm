import time
import telebot
from telebot import types
import config
import myData

bot = telebot.TeleBot(config.TOKEN)
lastQuery = -1


def flood_protect(message):
    global lastQuery
    if (message.date - lastQuery < 1):
        bot.send_message(message.chat.id, '—Ç–∏—Ö–æ-—Ç–∏—Ö–æ. –Ø —É—Å—Ç–∞–ª —É–∂–µ< –ø–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥')
        lastQuery = message.date
        return False
    else:
        lastQuery = message.date
        return True


# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.message_handler(commands=["start"])
def greeting(message):
    if not flood_protect(message):
        return
    bot.send_message(message.chat.id, """
    –ø—Ä–∏–≤–µ—Ç! –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–ø–∞–ª –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–±—Å—Ç–≤–æüò∫
–≤—Å–µ –ø—Ä–æ—Å—Ç–æ: —è –¥–∞—é –ø—Ä–∏–º–µ—Ä—á–∏–∫–∏, –∞ —Ç—ã –∏—Ö —Ä–µ—à–∞–µ—à—åüßë‚Äçüéì
* –Ω–∞–∂–º–∏ /menu —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –º–µ–Ω—é
    """, reply_markup=myData.start_rmk)


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['menu'])
def mainMenu(message):
    bot.send_message(message.chat.id, """
    * –Ω–∞–∂–º–∏—Ç–µ /solve —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ—à–∞—Ç—å 
* –Ω–∞–∂–º–∏—Ç–µ /sendReview —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é
    """, reply_markup=myData.menu_rmk)


# –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
@bot.message_handler(commands=["sendReview"])
def review(message):
    if not flood_protect(message):
        return
    if config.keepCalm:
        bot.send_message(message.chat.id, "–∏–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ—Ç–¥—ã—Ö–∞–µ—Ç")
        return
    userReview = bot.send_message(message.chat.id, "–Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(userReview, sendToAdmin)


def sendToAdmin(message):
    if not flood_protect(message):
        return
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    bot.send_message(config.adminId, f'–≤–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–∑—ã–≤!\n{message.from_user.username}: {message.text}')
    mainMenu(message)


# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è
@bot.message_handler(commands=["solve"])
def genTask(message, level=1, cur=0):
    time.sleep(1)
    if cur == 5:
        level += 1
        cur = 0
        bot.send_message(message.chat.id, f'–ü–æ–¥–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫–∏! —É–¥–∞—á–∏ –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ:)')
    elif cur < 0:
        level -= 1
        cur = 4
        bot.send_message(message.chat.id, f'—É–≤—ã, —Ç–µ–ø–µ—Ä—å —Ç—ã –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ:(')
    bot.send_message(message.chat.id, f' —Ç–µ–±—è {level} —É—Ä–æ–≤–µ–Ω—å –∏ {5 * (level - 1) + cur} —Ä–µ–π—Ç–∏–Ω–≥–∞')
    task, ans = myData.genTask(level)
    userAns = bot.send_message(message.chat.id, task, reply_markup=myData.solve_rmk)
    if not flood_protect(userAns):
        return
    bot.register_next_step_handler(userAns, checkAns, ans, task, level, cur)


# –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
def checkAns(userAns, ans, task, level, cur):
    if not flood_protect(userAns):
        return
    if userAns.text == r"/menu":
        bot.send_message(userAns.chat.id, '–í—ã —É–≤–µ—Ä–Ω–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Å –Ω—É–ª—è..')
        ext = bot.send_message(userAns.chat.id,
                               '—á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ /menu –µ—â–µ —Ä–∞–∑, –∞ —á—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–Ω–æ–ø–∫—É')
        bot.register_next_step_handler(ext, rUsure, userAns, ans, task, level, cur)
        return
    if userAns.text == str(ans):
        bot.send_message(userAns.chat.id, '–û—Ç–ª–∏—á–Ω–æ! —É —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ—à–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Äü•∫')
        cur += 1
    else:
        bot.send_message(userAns.chat.id, f'–ù–µ—Çüò° –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç {ans}')
        if level > 1:
            cur -= 1
        if not config.keepCalm:
            bot.send_message(config.adminId,
                             f'{userAns.from_user.username} –¥—É–º–∞–ª, —á—Ç–æ {task} {userAns.text}, –∞ –Ω–µ {ans}')
    genTask(userAns, level, cur)


def rUsure(ext, userAns, ans, task, level, cur):
    userAns.date = ext.date
    if ext.text == '/menu':
        mainMenu(ext)
    else:
        userAns = bot.send_message(ext.chat.id, task, reply_markup=myData.solve_rmk)
        bot.register_next_step_handler(userAns, checkAns, ans, task, level, cur)

# # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.infinity_polling()
